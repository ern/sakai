// Permission level constants
// These values must match the strings generated by the Java backend
const PERMISSION_LEVELS = {
  OWNER: 'Owner',
  AUTHOR: 'Author',
  NON_EDITING_AUTHOR: 'Nonediting Author',
  REVIEWER: 'Reviewer',
  NONE: 'None',
  CONTRIBUTOR: 'Contributor',
  CUSTOM: 'Custom'
};

const PERMISSION_VALUES = {
  ALL: 'All',
  OWN: 'Own',
  NONE: 'None'
};

// Helper function to retrieve all permission-related DOM elements
function getPermissionElements(checkBox) {
  const parts = checkBox.split(":");
  const baseId = `${parts[0]}:${parts[1]}:${parts[2]}`;

  const elements = {
    selectLevel: getTheElement(`${baseId}:level`),
    changeSettings: getTheElement(`${baseId}:changeSetting`),
    deletePostings: getTheElement(`${baseId}:deletePostings`),
    markAsRead: getTheElement(`${baseId}:markAsRead`),
    newForum: getTheElement(`${baseId}:newForum`),
    newResponse: getTheElement(`${baseId}:newR`),
    r2R: getTheElement(`${baseId}:newRtoR`),
    newTopic: getTheElement(`${baseId}:newTopic`),
    postGrades: getTheElement(`${baseId}:postGrades`),
    read: getTheElement(`${baseId}:read`),
    revisePostings: getTheElement(`${baseId}:revisePostings`),
    moderatePostings: getTheElement(`${baseId}:moderatePostings`),
    identifyAnonAuthors: getTheElement(`${baseId}:identifyAnonAuthors`),
    role: getTheElement(`${parts[0]}:role`)
  };

  // Calculate derived values
  elements.deleteAny = getPermissionValue(elements.deletePostings, PERMISSION_VALUES.ALL);
  elements.deleteOwn = getPermissionValue(elements.deletePostings, PERMISSION_VALUES.OWN);
  elements.reviseAny = getPermissionValue(elements.revisePostings, PERMISSION_VALUES.ALL);
  elements.reviseOwn = getPermissionValue(elements.revisePostings, PERMISSION_VALUES.OWN);
  elements.postGradesChecked = elements.postGrades ? elements.postGrades.checked : false;

  return elements;
}

function setCorrespondingLevel(checkBox) {
  const {
    selectLevel, changeSettings, deletePostings, deleteAny, deleteOwn,
    markAsRead, newForum, newResponse, r2R, newTopic, postGradesChecked,
    read, revisePostings, reviseAny, reviseOwn, moderatePostings, identifyAnonAuthors
  } = getPermissionElements(checkBox);

  if (selectLevel) {
    if (!(changeSettings && markAsRead && newForum && newResponse && r2R && newTopic && read && revisePostings && moderatePostings && identifyAnonAuthors && deletePostings)) {
      setIndexWithTextValue(selectLevel, PERMISSION_LEVELS.CUSTOM);
    } else {
      const newArray = [changeSettings.checked, markAsRead.checked, newForum.checked, newResponse.checked, r2R.checked, newTopic.checked, postGradesChecked, read.checked, reviseAny, reviseOwn, moderatePostings.checked, identifyAnonAuthors.checked, deleteAny, deleteOwn];
      setIndexWithTextValue(selectLevel, checkLevel(newArray));
    }
  }
}

function setIndexWithTextValue(element, textValue) {
  const index = Array.from(element.options).findIndex(option => option.value === textValue);
  if (index !== -1) {
    element.selectedIndex = index;
  }
}

// Consolidated helper function to replace getReviseAny, getReviseOwn, getDeleteAny, getDeleteOwn
function getPermissionValue(element, targetValue) {
  if (!element) {
    return false;
  }
  const userInput = getRadioButtonCheckedValue(element);
  return userInput === targetValue;
}

// Check which permission level matches the current settings
// These arrays are injected by JSF from the Java backend
function checkLevel(selectedLevel) {
  if (!selectedLevel || selectedLevel.length === 0) {
    return PERMISSION_LEVELS.CUSTOM;
  }

  const levelArrays = {
    [PERMISSION_LEVELS.OWNER]: window.ownerLevelArray,
    [PERMISSION_LEVELS.AUTHOR]: window.authorLevelArray,
    [PERMISSION_LEVELS.NON_EDITING_AUTHOR]: window.noneditingAuthorLevelArray,
    [PERMISSION_LEVELS.REVIEWER]: window.reviewerLevelArray,
    [PERMISSION_LEVELS.NONE]: window.noneLevelArray,
    [PERMISSION_LEVELS.CONTRIBUTOR]: window.contributorLevelArray
  };

  for (const [levelName, levelArray] of Object.entries(levelArrays)) {
    if (!levelArray || levelArray.length !== selectedLevel.length) {
      continue;
    }

    let matches = true;
    for (let i = 0; i < selectedLevel.length; i++) {
      if (levelArray[i] !== selectedLevel[i]) {
        matches = false;
        break;
      }
    }

    if (matches) {
      return levelName;
    }
  }

  return PERMISSION_LEVELS.CUSTOM;
}

function getRadioButtonCheckedValue(element) {
  const inputs = Array.from(element.querySelectorAll('input'));
  const checkedInput = inputs.find(input => input.checked);
  return checkedInput ? checkedInput.value : null;
}

function setRadioButtonValue(element, newValue) {
  const inputs = Array.from(element.querySelectorAll('input'));
  const targetInput = inputs.find(input => input.value === newValue);
  if (targetInput) {
    targetInput.checked = true;
  }
}

function setCorrespondingCheckboxes(checkBox) {
  const parts = checkBox.split(":");
  const {
    selectLevel, changeSettings, deletePostings, markAsRead, newForum,
    newResponse, r2R, newTopic, postGrades, read, revisePostings,
    moderatePostings, identifyAnonAuthors
  } = getPermissionElements(checkBox);

  if (selectLevel) {
    if (!(changeSettings && markAsRead && newForum && newResponse && r2R && newTopic && read && revisePostings && moderatePostings && identifyAnonAuthors && deletePostings)) {
      if (typeof window.noneLevelArray !== 'undefined') {
        setCheckBoxes(changeSettings, markAsRead, newForum, newResponse, r2R, newTopic, read, revisePostings, postGrades, moderatePostings, identifyAnonAuthors, deletePostings, window.noneLevelArray);
      }
    }

    const selectedValue = selectLevel.options[selectLevel.selectedIndex].value;

    // These arrays are injected via JSF from the Java backend
    const levelArrayMap = {
      [PERMISSION_LEVELS.OWNER]: window.ownerLevelArray,
      [PERMISSION_LEVELS.AUTHOR]: window.authorLevelArray,
      [PERMISSION_LEVELS.NON_EDITING_AUTHOR]: window.noneditingAuthorLevelArray,
      [PERMISSION_LEVELS.REVIEWER]: window.reviewerLevelArray,
      [PERMISSION_LEVELS.NONE]: window.noneLevelArray,
      [PERMISSION_LEVELS.CONTRIBUTOR]: window.contributorLevelArray
    };

    if (levelArrayMap[selectedValue]) {
      setCheckBoxes(changeSettings, markAsRead, newForum, newResponse, r2R, newTopic, read, revisePostings, postGrades, moderatePostings, identifyAnonAuthors, deletePostings, levelArrayMap[selectedValue]);
    } else if (selectedValue === PERMISSION_LEVELS.CUSTOM) {
      const permissionSetId = `${parts[0]}:${parts[1]}:${parts[2]}:permissionSet`;
      const permissionSet = document.getElementById(permissionSetId);
      if (permissionSet && permissionSet.parentNode.style.display === "none") {
        toggleAccordionPanel(parseInt(parts[2]));
      }
    }
  }
}

function setCheckBoxes(changeSettings, markAsRead, newForum, newResponse, r2R, newTopic, read, revisePostings, postGrades, moderatePostings, identifyAnonAuthors, deletePostings, arrayLevel) {
  if (changeSettings) changeSettings.checked = arrayLevel[0];
  if (markAsRead) markAsRead.checked = arrayLevel[1];
  if (newForum) newForum.checked = arrayLevel[2];
  if (newResponse) newResponse.checked = arrayLevel[3];
  if (r2R) r2R.checked = arrayLevel[4];
  if (newTopic) newTopic.checked = arrayLevel[5];
  if (postGrades) postGrades.checked = arrayLevel[6];
  if (read) read.checked = arrayLevel[7];

  if (revisePostings) {
    if (arrayLevel[8]) {
      setRadioButtonValue(revisePostings, PERMISSION_VALUES.ALL);
    } else if (arrayLevel[9]) {
      setRadioButtonValue(revisePostings, PERMISSION_VALUES.OWN);
    } else {
      setRadioButtonValue(revisePostings, PERMISSION_VALUES.NONE);
    }
  }

  if (moderatePostings) moderatePostings.checked = arrayLevel[10];
  if (identifyAnonAuthors) identifyAnonAuthors.checked = arrayLevel[11];

  if (deletePostings) {
    if (arrayLevel[12]) {
      setRadioButtonValue(deletePostings, PERMISSION_VALUES.ALL);
    } else if (arrayLevel[13]) {
      setRadioButtonValue(deletePostings, PERMISSION_VALUES.OWN);
    } else {
      setRadioButtonValue(deletePostings, PERMISSION_VALUES.NONE);
    }
  }
}

// Vanilla JS accordion implementation (replaces jQuery UI accordion)
function toggleAccordionPanel(panelIndex) {
  const accordionElement = document.getElementById("revise:perm");
  if (!accordionElement) return;

  const headers = accordionElement.querySelectorAll('.permissionCustomize');
  if (panelIndex < 0 || panelIndex >= headers.length) return;

  const targetHeader = headers[panelIndex];
  const targetPanel = targetHeader.nextElementSibling;

  if (targetPanel) {
    headers.forEach((header, index) => {
      if (index !== panelIndex) {
        const panel = header.nextElementSibling;
        if (panel) {
          panel.style.display = 'none';
          header.setAttribute('aria-expanded', 'false');
        }
      }
    });

    const isHidden = targetPanel.style.display === 'none' || !targetPanel.style.display;
    targetPanel.style.display = isHidden ? 'block' : 'none';
    targetHeader.setAttribute('aria-expanded', isHidden ? 'true' : 'false');

    if (typeof resizeFrame === 'function') {
      resizeFrame('grow');
    }
  }
}

// Initialize accordion with keyboard accessibility
document.addEventListener('DOMContentLoaded', () => {
  const accordionElement = document.getElementById("revise:perm");
  if (!accordionElement) return;

  const headers = accordionElement.querySelectorAll('.permissionCustomize');

  headers.forEach((header, index) => {
    header.setAttribute('tabindex', '0');
    header.setAttribute('role', 'button');
    header.setAttribute('aria-expanded', 'false');

    const panel = header.nextElementSibling;
    if (panel) {
      panel.style.display = 'none';
      panel.setAttribute('role', 'region');
    }

    header.addEventListener('click', (event) => {
      event.preventDefault();
      toggleAccordionPanel(index);
    });

    header.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        toggleAccordionPanel(index);
      }
    });
  });
});

function disableOrEnableModeratePerm() {
  const moderateSelection = getTheElement("revise:moderated");
  const userInput = getRadioButtonCheckedValue(moderateSelection);

  if (userInput) {
    const shouldDisable = (userInput !== "true");
    // Find all moderatePostings checkboxes using attribute selector
    const allModeratePostings = document.querySelectorAll('[id^="revise:perm:"][id$=":moderatePostings"]');

    allModeratePostings.forEach(checkbox => {
      checkbox.disabled = shouldDisable;
    });
  }
}
